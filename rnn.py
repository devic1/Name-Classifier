# -*- coding: utf-8 -*-
"""rnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zapgMBrfXs1oW_TRRg9lGdQXnTJ2qcVT
"""

!wget https://download.pytorch.org/tutorial/data.zip

!unzip data.zip

import torch 
import torch.nn as nn
import os
import unicodedata

lett = set()
g = " .,;'"
for i in g:
  lett.add(i)
lett

cat = {}
for i in os.listdir("data/names"):
  with open(os.path.join("data","names",i),"r") as f:
    nd = f.read().split("\n")
    for j in nd:
      for k in j:
        k = unicodedata.normalize('NFKD',k).encode('ascii', 'ignore').decode()
        lett.add(k)
    cat[i[:-4]] = nd
n_cat = len(cat)

ltoi = {j:i for i,j in enumerate(lett)}
ln_l = len(ltoi)
print(ltoi)
ln_l

print(cat['Italian'][:5])
n_cat

def enc(letter):
  tempt = torch.tensor([])
  for idx,ele in enumerate(letter):
    c = torch.nn.functional.one_hot(torch.tensor(ltoi[ele]),num_classes=ln_l)
    tempt = torch.cat((tempt,c.unsqueeze(0)),dim=0)
  return tempt.view(-1,1,62)

f = enc("Jones")

import torch.nn as nn

class RNN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(RNN, self).__init__()

        self.hidden_size = hidden_size

        self.i2h = nn.Linear(input_size + hidden_size, hidden_size)
        self.i2o = nn.Linear(input_size + hidden_size, output_size)
        self.softmax = nn.LogSoftmax(dim=1)

    def forward(self, input, hidden):
        combined = torch.cat((input, hidden), 1)
        hidden = self.i2h(combined)
        output = self.i2o(combined)
        output = self.softmax(output)
        return output, hidden

    def initHidden(self):
        return torch.zeros(1, self.hidden_size)

n_hidden = 128
rnn = RNN(62, n_hidden, n_cat)

rnn